<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension="/" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Xml" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#  var manager = TemplateFileManager.Create(this);


	var pageByGeneratorPATH  = this.Host.ResolvePath("PageByGenerator.tt");
	var pagesFolderPATH = pageByGeneratorPATH.Replace("T4Template\\PageByGenerator.tt", "Pages\\");
	var pagesPaths = new XmlDocument();
	pagesPaths.Load(this.Host.ResolvePath(string.Format("{0}PageClasses.xml",pagesFolderPATH)));
	var allPages = new List<string>();
	foreach (System.Xml.XmlElement pageFileName in pagesPaths.SelectNodes("//PageClassSelectorFile"))
	{
		 var fileName = pageFileName.Attributes["fileName"].Value;
//Start foreach 1
	var doc = new XmlDocument(); 
	doc.Load(this.Host.ResolvePath(string.Format("{0}{1}.xml",pagesFolderPATH, fileName) ));

	var nodes = doc.SelectNodes("//PageClass");
	foreach(System.Xml.XmlElement node in nodes)
	{
//Start foreach 2

	var page = node.Attributes["page"].Value;
	var folder = node.Attributes["folder"].Value;
	//var folder = "GeneratedClasses";
	var len = page.LastIndexOf("By");
	string parentName = len > 0 ? page.Remove(len) : "empty";
	#>
<# manager.StartNewFile(page +".cs", "MasterAutomationFramework.T4MasterAutomationFramework.T4GenericTemplates", folder); #>
// ========================================================================
//          Copyright (C) Innovative Solutions Gross Bartosz
//                      - All Rights Reserved
// ========================================================================
//
// The source code contained or described herein and all documents related
// to the source code are owned by Innovative Solutions Gross Bartosz
// Unauthorized copying of this file, via any medium is strictly prohibited
//
// ========================================================================
//          Developed by Bartosz Gross, grossbartosz@gmail.com
// ========================================================================
// ------------------------------------------------------------------------
namespace MasterAutomationFramework.T4MasterAutomationFramework.T4GenericTemplates.Pages.<#=folder#>
{
	using System.Diagnostics.CodeAnalysis;
	using OpenQA.Selenium;
    using OpenQA.Selenium.Support.PageObjects;
	using System.Collections.Generic;
	using MasterAutomationFramework.SeleniumAPI.Extension;
	using MasterAutomationFramework.T4GenericTemplates.GeneratedClasses;

	// This is auto-generated code
	[SuppressMessage("ReSharper", "MemberCanBeProtected.Global")]
	[SuppressMessage("ReSharper", "MemberCanBePrivate.Global")]
	public abstract class <#=page#> : WebPageBase
	{
		protected abstract IWebDriver WebDriver { get; }
		
        private Dictionary<string, By> elementsSelectors;

        public override Dictionary<string, By> Selectors
        {
            get
            {
                if (elementsSelectors == null)
                {
                    elementsSelectors = GetByReflector.GetAllElementLocators(typeof(<#=parentName#>));
                }

                return elementsSelectors;
            }
        }
	<#var nodesElements = node.SelectNodes("ElementSelector");
			foreach(System.Xml.XmlElement elementNode in nodesElements)
			{
				var elementName = elementNode.Attributes["elementName"].Value;
				var selector = elementNode.Attributes["selector"].Value;
var path = elementNode.Attributes["path"].Value;this.WriteLine("");

#>		[FindsBy(How = How.<#= selector #>, Using = "<#= path #>")]
		public IWebElement <#=elementName#>Element => this.WebDriver.FindElement(this.<#=elementName#>By);
		protected By <#=elementName#>By => <#= GetSelector(selector, path) #>;
	<#}#>}
}
<#
//Start foreach 2
	}
//Start foreach 1
}#>
<# manager.EndBlock(); #>
<# manager.Process(); #>
<#+
string GetSelector(string selectorType, string path)
		{
			string selector = string.Empty;
			switch (selectorType.ToLower())
			{
				case "xpath":
					selector = string.Format("By.XPath(\"{0}\")", path);
					break;
				case "id":
					selector = string.Format("By.Id(\n{0}\n)", path);
					break;
				default:
					break;
			}

			return selector;
		}

#>